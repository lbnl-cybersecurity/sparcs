// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: upmuStructKeyValueListProtobuf.proto

#ifndef PROTOBUF_upmuStructKeyValueListProtobuf_2eproto__INCLUDED
#define PROTOBUF_upmuStructKeyValueListProtobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace serviceCommon {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto();
void protobuf_AssignDesc_upmuStructKeyValueListProtobuf_2eproto();
void protobuf_ShutdownFile_upmuStructKeyValueListProtobuf_2eproto();

class KeyValue;
class KeyValueList;
class upmuStructKeyValueList;

// ===================================================================

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  enum ValueCase {
    kIntegerVal = 2,
    kUIntegerVal = 3,
    kFloatVal = 4,
    kStringVal = 5,
    VALUE_NOT_SET = 0,
  };

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional int32 integerVal = 2;
  inline bool has_integerval() const;
  inline void clear_integerval();
  static const int kIntegerValFieldNumber = 2;
  inline ::google::protobuf::int32 integerval() const;
  inline void set_integerval(::google::protobuf::int32 value);

  // optional uint32 uIntegerVal = 3;
  inline bool has_uintegerval() const;
  inline void clear_uintegerval();
  static const int kUIntegerValFieldNumber = 3;
  inline ::google::protobuf::uint32 uintegerval() const;
  inline void set_uintegerval(::google::protobuf::uint32 value);

  // optional float floatVal = 4;
  inline bool has_floatval() const;
  inline void clear_floatval();
  static const int kFloatValFieldNumber = 4;
  inline float floatval() const;
  inline void set_floatval(float value);

  // optional string stringVal = 5;
  inline bool has_stringval() const;
  inline void clear_stringval();
  static const int kStringValFieldNumber = 5;
  inline const ::std::string& stringval() const;
  inline void set_stringval(const ::std::string& value);
  inline void set_stringval(const char* value);
  inline void set_stringval(const char* value, size_t size);
  inline ::std::string* mutable_stringval();
  inline ::std::string* release_stringval();
  inline void set_allocated_stringval(::std::string* stringval);

  inline ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:serviceCommon.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_integerval();
  inline void set_has_uintegerval();
  inline void set_has_floatval();
  inline void set_has_stringval();

  inline bool has_value();
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  union ValueUnion {
    ::google::protobuf::int32 integerval_;
    ::google::protobuf::uint32 uintegerval_;
    float floatval_;
    ::std::string* stringval_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto();
  friend void protobuf_AssignDesc_upmuStructKeyValueListProtobuf_2eproto();
  friend void protobuf_ShutdownFile_upmuStructKeyValueListProtobuf_2eproto();

  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class KeyValueList : public ::google::protobuf::Message {
 public:
  KeyValueList();
  virtual ~KeyValueList();

  KeyValueList(const KeyValueList& from);

  inline KeyValueList& operator=(const KeyValueList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValueList& default_instance();

  void Swap(KeyValueList* other);

  // implements Message ----------------------------------------------

  KeyValueList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValueList& from);
  void MergeFrom(const KeyValueList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string category = 1;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 1;
  inline const ::std::string& category() const;
  inline void set_category(const ::std::string& value);
  inline void set_category(const char* value);
  inline void set_category(const char* value, size_t size);
  inline ::std::string* mutable_category();
  inline ::std::string* release_category();
  inline void set_allocated_category(::std::string* category);

  // repeated .serviceCommon.KeyValue element = 2;
  inline int element_size() const;
  inline void clear_element();
  static const int kElementFieldNumber = 2;
  inline const ::serviceCommon::KeyValue& element(int index) const;
  inline ::serviceCommon::KeyValue* mutable_element(int index);
  inline ::serviceCommon::KeyValue* add_element();
  inline const ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValue >&
      element() const;
  inline ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValue >*
      mutable_element();

  // @@protoc_insertion_point(class_scope:serviceCommon.KeyValueList)
 private:
  inline void set_has_category();
  inline void clear_has_category();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* category_;
  ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValue > element_;
  friend void  protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto();
  friend void protobuf_AssignDesc_upmuStructKeyValueListProtobuf_2eproto();
  friend void protobuf_ShutdownFile_upmuStructKeyValueListProtobuf_2eproto();

  void InitAsDefaultInstance();
  static KeyValueList* default_instance_;
};
// -------------------------------------------------------------------

class upmuStructKeyValueList : public ::google::protobuf::Message {
 public:
  upmuStructKeyValueList();
  virtual ~upmuStructKeyValueList();

  upmuStructKeyValueList(const upmuStructKeyValueList& from);

  inline upmuStructKeyValueList& operator=(const upmuStructKeyValueList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upmuStructKeyValueList& default_instance();

  void Swap(upmuStructKeyValueList* other);

  // implements Message ----------------------------------------------

  upmuStructKeyValueList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upmuStructKeyValueList& from);
  void MergeFrom(const upmuStructKeyValueList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 timeStamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .serviceCommon.KeyValueList list = 3;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 3;
  inline const ::serviceCommon::KeyValueList& list(int index) const;
  inline ::serviceCommon::KeyValueList* mutable_list(int index);
  inline ::serviceCommon::KeyValueList* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValueList >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValueList >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:serviceCommon.upmuStructKeyValueList)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValueList > list_;
  ::google::protobuf::uint32 timestamp_;
  friend void  protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto();
  friend void protobuf_AssignDesc_upmuStructKeyValueListProtobuf_2eproto();
  friend void protobuf_ShutdownFile_upmuStructKeyValueListProtobuf_2eproto();

  void InitAsDefaultInstance();
  static upmuStructKeyValueList* default_instance_;
};
// ===================================================================


// ===================================================================

// KeyValue

// required string key = 1;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:serviceCommon.KeyValue.key)
  return *key_;
}
inline void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:serviceCommon.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:serviceCommon.KeyValue.key)
}
inline void KeyValue::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serviceCommon.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:serviceCommon.KeyValue.key)
  return key_;
}
inline ::std::string* KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:serviceCommon.KeyValue.key)
}

// optional int32 integerVal = 2;
inline bool KeyValue::has_integerval() const {
  return value_case() == kIntegerVal;
}
inline void KeyValue::set_has_integerval() {
  _oneof_case_[0] = kIntegerVal;
}
inline void KeyValue::clear_integerval() {
  if (has_integerval()) {
    value_.integerval_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 KeyValue::integerval() const {
  if (has_integerval()) {
    return value_.integerval_;
  }
  return 0;
}
inline void KeyValue::set_integerval(::google::protobuf::int32 value) {
  if (!has_integerval()) {
    clear_value();
    set_has_integerval();
  }
  value_.integerval_ = value;
}

// optional uint32 uIntegerVal = 3;
inline bool KeyValue::has_uintegerval() const {
  return value_case() == kUIntegerVal;
}
inline void KeyValue::set_has_uintegerval() {
  _oneof_case_[0] = kUIntegerVal;
}
inline void KeyValue::clear_uintegerval() {
  if (has_uintegerval()) {
    value_.uintegerval_ = 0u;
    clear_has_value();
  }
}
inline ::google::protobuf::uint32 KeyValue::uintegerval() const {
  if (has_uintegerval()) {
    return value_.uintegerval_;
  }
  return 0u;
}
inline void KeyValue::set_uintegerval(::google::protobuf::uint32 value) {
  if (!has_uintegerval()) {
    clear_value();
    set_has_uintegerval();
  }
  value_.uintegerval_ = value;
}

// optional float floatVal = 4;
inline bool KeyValue::has_floatval() const {
  return value_case() == kFloatVal;
}
inline void KeyValue::set_has_floatval() {
  _oneof_case_[0] = kFloatVal;
}
inline void KeyValue::clear_floatval() {
  if (has_floatval()) {
    value_.floatval_ = 0;
    clear_has_value();
  }
}
inline float KeyValue::floatval() const {
  if (has_floatval()) {
    return value_.floatval_;
  }
  return 0;
}
inline void KeyValue::set_floatval(float value) {
  if (!has_floatval()) {
    clear_value();
    set_has_floatval();
  }
  value_.floatval_ = value;
}

// optional string stringVal = 5;
inline bool KeyValue::has_stringval() const {
  return value_case() == kStringVal;
}
inline void KeyValue::set_has_stringval() {
  _oneof_case_[0] = kStringVal;
}
inline void KeyValue::clear_stringval() {
  if (has_stringval()) {
    delete value_.stringval_;
    clear_has_value();
  }
}
inline const ::std::string& KeyValue::stringval() const {
  if (has_stringval()) {
    return *value_.stringval_;
  }
  return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void KeyValue::set_stringval(const ::std::string& value) {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_ = new ::std::string;
  }
  value_.stringval_->assign(value);
}
inline void KeyValue::set_stringval(const char* value) {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_ = new ::std::string;
  }
  value_.stringval_->assign(value);
}
inline void KeyValue::set_stringval(const char* value, size_t size) {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_ = new ::std::string;
  }
  value_.stringval_->assign(
      reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_stringval() {
  if (!has_stringval()) {
    clear_value();
    set_has_stringval();
    value_.stringval_ = new ::std::string;
  }
  return value_.stringval_;
}
inline ::std::string* KeyValue::release_stringval() {
  if (has_stringval()) {
    clear_has_value();
    ::std::string* temp = value_.stringval_;
    value_.stringval_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void KeyValue::set_allocated_stringval(::std::string* stringval) {
  clear_value();
  if (stringval) {
    set_has_stringval();
    value_.stringval_ = stringval;
  }
}

inline bool KeyValue::has_value() {
  return value_case() != VALUE_NOT_SET;
}
inline void KeyValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline KeyValue::ValueCase KeyValue::value_case() const {
  return KeyValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// KeyValueList

// required string category = 1;
inline bool KeyValueList::has_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValueList::set_has_category() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValueList::clear_has_category() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValueList::clear_category() {
  if (category_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_->clear();
  }
  clear_has_category();
}
inline const ::std::string& KeyValueList::category() const {
  // @@protoc_insertion_point(field_get:serviceCommon.KeyValueList.category)
  return *category_;
}
inline void KeyValueList::set_category(const ::std::string& value) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_ = new ::std::string;
  }
  category_->assign(value);
  // @@protoc_insertion_point(field_set:serviceCommon.KeyValueList.category)
}
inline void KeyValueList::set_category(const char* value) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_ = new ::std::string;
  }
  category_->assign(value);
  // @@protoc_insertion_point(field_set_char:serviceCommon.KeyValueList.category)
}
inline void KeyValueList::set_category(const char* value, size_t size) {
  set_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_ = new ::std::string;
  }
  category_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serviceCommon.KeyValueList.category)
}
inline ::std::string* KeyValueList::mutable_category() {
  set_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    category_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:serviceCommon.KeyValueList.category)
  return category_;
}
inline ::std::string* KeyValueList::release_category() {
  clear_has_category();
  if (category_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = category_;
    category_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KeyValueList::set_allocated_category(::std::string* category) {
  if (category_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete category_;
  }
  if (category) {
    set_has_category();
    category_ = category;
  } else {
    clear_has_category();
    category_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:serviceCommon.KeyValueList.category)
}

// repeated .serviceCommon.KeyValue element = 2;
inline int KeyValueList::element_size() const {
  return element_.size();
}
inline void KeyValueList::clear_element() {
  element_.Clear();
}
inline const ::serviceCommon::KeyValue& KeyValueList::element(int index) const {
  // @@protoc_insertion_point(field_get:serviceCommon.KeyValueList.element)
  return element_.Get(index);
}
inline ::serviceCommon::KeyValue* KeyValueList::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:serviceCommon.KeyValueList.element)
  return element_.Mutable(index);
}
inline ::serviceCommon::KeyValue* KeyValueList::add_element() {
  // @@protoc_insertion_point(field_add:serviceCommon.KeyValueList.element)
  return element_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValue >&
KeyValueList::element() const {
  // @@protoc_insertion_point(field_list:serviceCommon.KeyValueList.element)
  return element_;
}
inline ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValue >*
KeyValueList::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:serviceCommon.KeyValueList.element)
  return &element_;
}

// -------------------------------------------------------------------

// upmuStructKeyValueList

// required uint32 timeStamp = 1;
inline bool upmuStructKeyValueList::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upmuStructKeyValueList::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upmuStructKeyValueList::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upmuStructKeyValueList::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 upmuStructKeyValueList::timestamp() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuStructKeyValueList.timeStamp)
  return timestamp_;
}
inline void upmuStructKeyValueList::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.upmuStructKeyValueList.timeStamp)
}

// required string name = 2;
inline bool upmuStructKeyValueList::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upmuStructKeyValueList::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upmuStructKeyValueList::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upmuStructKeyValueList::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& upmuStructKeyValueList::name() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuStructKeyValueList.name)
  return *name_;
}
inline void upmuStructKeyValueList::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:serviceCommon.upmuStructKeyValueList.name)
}
inline void upmuStructKeyValueList::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:serviceCommon.upmuStructKeyValueList.name)
}
inline void upmuStructKeyValueList::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serviceCommon.upmuStructKeyValueList.name)
}
inline ::std::string* upmuStructKeyValueList::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:serviceCommon.upmuStructKeyValueList.name)
  return name_;
}
inline ::std::string* upmuStructKeyValueList::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void upmuStructKeyValueList::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:serviceCommon.upmuStructKeyValueList.name)
}

// repeated .serviceCommon.KeyValueList list = 3;
inline int upmuStructKeyValueList::list_size() const {
  return list_.size();
}
inline void upmuStructKeyValueList::clear_list() {
  list_.Clear();
}
inline const ::serviceCommon::KeyValueList& upmuStructKeyValueList::list(int index) const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuStructKeyValueList.list)
  return list_.Get(index);
}
inline ::serviceCommon::KeyValueList* upmuStructKeyValueList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:serviceCommon.upmuStructKeyValueList.list)
  return list_.Mutable(index);
}
inline ::serviceCommon::KeyValueList* upmuStructKeyValueList::add_list() {
  // @@protoc_insertion_point(field_add:serviceCommon.upmuStructKeyValueList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValueList >&
upmuStructKeyValueList::list() const {
  // @@protoc_insertion_point(field_list:serviceCommon.upmuStructKeyValueList.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::serviceCommon::KeyValueList >*
upmuStructKeyValueList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:serviceCommon.upmuStructKeyValueList.list)
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serviceCommon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_upmuStructKeyValueListProtobuf_2eproto__INCLUDED
