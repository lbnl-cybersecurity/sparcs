// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: upmuStructKeyValueListProtobuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "upmuStructKeyValueListProtobuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace serviceCommon {

namespace {

const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
struct KeyValueOneofInstance {
  ::google::protobuf::int32 integerval_;
  ::google::protobuf::uint32 uintegerval_;
  float floatval_;
  const ::std::string* stringval_;
}* KeyValue_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* KeyValueList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValueList_reflection_ = NULL;
const ::google::protobuf::Descriptor* upmuStructKeyValueList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upmuStructKeyValueList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_upmuStructKeyValueListProtobuf_2eproto() {
  protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "upmuStructKeyValueListProtobuf.proto");
  GOOGLE_CHECK(file != NULL);
  KeyValue_descriptor_ = file->message_type(0);
  static const int KeyValue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(KeyValue_default_oneof_instance_, integerval_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(KeyValue_default_oneof_instance_, uintegerval_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(KeyValue_default_oneof_instance_, floatval_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(KeyValue_default_oneof_instance_, stringval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      KeyValue_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  KeyValueList_descriptor_ = file->message_type(1);
  static const int KeyValueList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueList, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueList, element_),
  };
  KeyValueList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValueList_descriptor_,
      KeyValueList::default_instance_,
      KeyValueList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValueList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValueList));
  upmuStructKeyValueList_descriptor_ = file->message_type(2);
  static const int upmuStructKeyValueList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upmuStructKeyValueList, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upmuStructKeyValueList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upmuStructKeyValueList, list_),
  };
  upmuStructKeyValueList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upmuStructKeyValueList_descriptor_,
      upmuStructKeyValueList::default_instance_,
      upmuStructKeyValueList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upmuStructKeyValueList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upmuStructKeyValueList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upmuStructKeyValueList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_upmuStructKeyValueListProtobuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValueList_descriptor_, &KeyValueList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upmuStructKeyValueList_descriptor_, &upmuStructKeyValueList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_upmuStructKeyValueListProtobuf_2eproto() {
  delete KeyValue::default_instance_;
  delete KeyValue_default_oneof_instance_;
  delete KeyValue_reflection_;
  delete KeyValueList::default_instance_;
  delete KeyValueList_reflection_;
  delete upmuStructKeyValueList::default_instance_;
  delete upmuStructKeyValueList_reflection_;
}

void protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$upmuStructKeyValueListProtobuf.proto\022\r"
    "serviceCommon\"v\n\010KeyValue\022\013\n\003key\030\001 \002(\t\022\024"
    "\n\nintegerVal\030\002 \001(\005H\000\022\025\n\013uIntegerVal\030\003 \001("
    "\rH\000\022\022\n\010floatVal\030\004 \001(\002H\000\022\023\n\tstringVal\030\005 \001"
    "(\tH\000B\007\n\005value\"J\n\014KeyValueList\022\020\n\010categor"
    "y\030\001 \002(\t\022(\n\007element\030\002 \003(\0132\027.serviceCommon"
    ".KeyValue\"d\n\026upmuStructKeyValueList\022\021\n\tt"
    "imeStamp\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022)\n\004list\030\003 \003"
    "(\0132\033.serviceCommon.KeyValueList", 351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "upmuStructKeyValueListProtobuf.proto", &protobuf_RegisterTypes);
  KeyValue::default_instance_ = new KeyValue();
  KeyValue_default_oneof_instance_ = new KeyValueOneofInstance;
  KeyValueList::default_instance_ = new KeyValueList();
  upmuStructKeyValueList::default_instance_ = new upmuStructKeyValueList();
  KeyValue::default_instance_->InitAsDefaultInstance();
  KeyValueList::default_instance_->InitAsDefaultInstance();
  upmuStructKeyValueList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_upmuStructKeyValueListProtobuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_upmuStructKeyValueListProtobuf_2eproto {
  StaticDescriptorInitializer_upmuStructKeyValueListProtobuf_2eproto() {
    protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto();
  }
} static_descriptor_initializer_upmuStructKeyValueListProtobuf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kIntegerValFieldNumber;
const int KeyValue::kUIntegerValFieldNumber;
const int KeyValue::kFloatValFieldNumber;
const int KeyValue::kStringValFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceCommon.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
  KeyValue_default_oneof_instance_->integerval_ = 0;
  KeyValue_default_oneof_instance_->uintegerval_ = 0u;
  KeyValue_default_oneof_instance_->floatval_ = 0;
  KeyValue_default_oneof_instance_->stringval_ = &::google::protobuf::internal::GetEmptyStringAlreadyInited();
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:serviceCommon.KeyValue)
}

void KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:serviceCommon.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::clear_value() {
  switch(value_case()) {
    case kIntegerVal: {
      // No need to clear
      break;
    }
    case kUIntegerVal: {
      // No need to clear
      break;
    }
    case kFloatVal: {
      // No need to clear
      break;
    }
    case kStringVal: {
      delete value_.stringval_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void KeyValue::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceCommon.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_integerVal;
        break;
      }

      // optional int32 integerVal = 2;
      case 2: {
        if (tag == 16) {
         parse_integerVal:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.integerval_)));
          set_has_integerval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uIntegerVal;
        break;
      }

      // optional uint32 uIntegerVal = 3;
      case 3: {
        if (tag == 24) {
         parse_uIntegerVal:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_.uintegerval_)));
          set_has_uintegerval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_floatVal;
        break;
      }

      // optional float floatVal = 4;
      case 4: {
        if (tag == 37) {
         parse_floatVal:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.floatval_)));
          set_has_floatval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stringVal;
        break;
      }

      // optional string stringVal = 5;
      case 5: {
        if (tag == 42) {
         parse_stringVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stringval().data(), this->stringval().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stringval");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceCommon.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceCommon.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceCommon.KeyValue)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional int32 integerVal = 2;
  if (has_integerval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integerval(), output);
  }

  // optional uint32 uIntegerVal = 3;
  if (has_uintegerval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uintegerval(), output);
  }

  // optional float floatVal = 4;
  if (has_floatval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->floatval(), output);
  }

  // optional string stringVal = 5;
  if (has_stringval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringval().data(), this->stringval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringval");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stringval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceCommon.KeyValue)
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceCommon.KeyValue)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional int32 integerVal = 2;
  if (has_integerval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integerval(), target);
  }

  // optional uint32 uIntegerVal = 3;
  if (has_uintegerval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uintegerval(), target);
  }

  // optional float floatVal = 4;
  if (has_floatval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->floatval(), target);
  }

  // optional string stringVal = 5;
  if (has_stringval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringval().data(), this->stringval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringval");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stringval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceCommon.KeyValue)
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  switch (value_case()) {
    // optional int32 integerVal = 2;
    case kIntegerVal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integerval());
      break;
    }
    // optional uint32 uIntegerVal = 3;
    case kUIntegerVal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uintegerval());
      break;
    }
    // optional float floatVal = 4;
    case kFloatVal: {
      total_size += 1 + 4;
      break;
    }
    // optional string stringVal = 5;
    case kStringVal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringval());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.value_case()) {
    case kIntegerVal: {
      set_integerval(from.integerval());
      break;
    }
    case kUIntegerVal: {
      set_uintegerval(from.uintegerval());
      break;
    }
    case kFloatVal: {
      set_floatval(from.floatval());
      break;
    }
    case kStringVal: {
      set_stringval(from.stringval());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValueList::kCategoryFieldNumber;
const int KeyValueList::kElementFieldNumber;
#endif  // !_MSC_VER

KeyValueList::KeyValueList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceCommon.KeyValueList)
}

void KeyValueList::InitAsDefaultInstance() {
}

KeyValueList::KeyValueList(const KeyValueList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:serviceCommon.KeyValueList)
}

void KeyValueList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  category_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValueList::~KeyValueList() {
  // @@protoc_insertion_point(destructor:serviceCommon.KeyValueList)
  SharedDtor();
}

void KeyValueList::SharedDtor() {
  if (category_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete category_;
  }
  if (this != default_instance_) {
  }
}

void KeyValueList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValueList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValueList_descriptor_;
}

const KeyValueList& KeyValueList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto();
  return *default_instance_;
}

KeyValueList* KeyValueList::default_instance_ = NULL;

KeyValueList* KeyValueList::New() const {
  return new KeyValueList;
}

void KeyValueList::Clear() {
  if (has_category()) {
    if (category_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      category_->clear();
    }
  }
  element_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValueList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceCommon.KeyValueList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string category = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "category");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_element;
        break;
      }

      // repeated .serviceCommon.KeyValue element = 2;
      case 2: {
        if (tag == 18) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_element;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceCommon.KeyValueList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceCommon.KeyValueList)
  return false;
#undef DO_
}

void KeyValueList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceCommon.KeyValueList)
  // required string category = 1;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->category(), output);
  }

  // repeated .serviceCommon.KeyValue element = 2;
  for (int i = 0; i < this->element_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->element(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceCommon.KeyValueList)
}

::google::protobuf::uint8* KeyValueList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceCommon.KeyValueList)
  // required string category = 1;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }

  // repeated .serviceCommon.KeyValue element = 2;
  for (int i = 0; i < this->element_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->element(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceCommon.KeyValueList)
  return target;
}

int KeyValueList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

  }
  // repeated .serviceCommon.KeyValue element = 2;
  total_size += 1 * this->element_size();
  for (int i = 0; i < this->element_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValueList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValueList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValueList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValueList::MergeFrom(const KeyValueList& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_.MergeFrom(from.element_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValueList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueList::CopyFrom(const KeyValueList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->element())) return false;
  return true;
}

void KeyValueList::Swap(KeyValueList* other) {
  if (other != this) {
    std::swap(category_, other->category_);
    element_.Swap(&other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValueList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValueList_descriptor_;
  metadata.reflection = KeyValueList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upmuStructKeyValueList::kTimeStampFieldNumber;
const int upmuStructKeyValueList::kNameFieldNumber;
const int upmuStructKeyValueList::kListFieldNumber;
#endif  // !_MSC_VER

upmuStructKeyValueList::upmuStructKeyValueList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceCommon.upmuStructKeyValueList)
}

void upmuStructKeyValueList::InitAsDefaultInstance() {
}

upmuStructKeyValueList::upmuStructKeyValueList(const upmuStructKeyValueList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:serviceCommon.upmuStructKeyValueList)
}

void upmuStructKeyValueList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upmuStructKeyValueList::~upmuStructKeyValueList() {
  // @@protoc_insertion_point(destructor:serviceCommon.upmuStructKeyValueList)
  SharedDtor();
}

void upmuStructKeyValueList::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void upmuStructKeyValueList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upmuStructKeyValueList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upmuStructKeyValueList_descriptor_;
}

const upmuStructKeyValueList& upmuStructKeyValueList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_upmuStructKeyValueListProtobuf_2eproto();
  return *default_instance_;
}

upmuStructKeyValueList* upmuStructKeyValueList::default_instance_ = NULL;

upmuStructKeyValueList* upmuStructKeyValueList::New() const {
  return new upmuStructKeyValueList;
}

void upmuStructKeyValueList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    timestamp_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upmuStructKeyValueList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceCommon.upmuStructKeyValueList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timeStamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .serviceCommon.KeyValueList list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceCommon.upmuStructKeyValueList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceCommon.upmuStructKeyValueList)
  return false;
#undef DO_
}

void upmuStructKeyValueList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceCommon.upmuStructKeyValueList)
  // required uint32 timeStamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .serviceCommon.KeyValueList list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceCommon.upmuStructKeyValueList)
}

::google::protobuf::uint8* upmuStructKeyValueList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceCommon.upmuStructKeyValueList)
  // required uint32 timeStamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .serviceCommon.KeyValueList list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceCommon.upmuStructKeyValueList)
  return target;
}

int upmuStructKeyValueList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timeStamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .serviceCommon.KeyValueList list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upmuStructKeyValueList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upmuStructKeyValueList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upmuStructKeyValueList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upmuStructKeyValueList::MergeFrom(const upmuStructKeyValueList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upmuStructKeyValueList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upmuStructKeyValueList::CopyFrom(const upmuStructKeyValueList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upmuStructKeyValueList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void upmuStructKeyValueList::Swap(upmuStructKeyValueList* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(name_, other->name_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upmuStructKeyValueList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upmuStructKeyValueList_descriptor_;
  metadata.reflection = upmuStructKeyValueList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serviceCommon

// @@protoc_insertion_point(global_scope)
