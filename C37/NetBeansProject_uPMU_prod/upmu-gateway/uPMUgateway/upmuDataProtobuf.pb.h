// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: upmuDataProtobuf.proto

#ifndef PROTOBUF_upmuDataProtobuf_2eproto__INCLUDED
#define PROTOBUF_upmuDataProtobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace serviceCommon {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_upmuDataProtobuf_2eproto();
void protobuf_AssignDesc_upmuDataProtobuf_2eproto();
void protobuf_ShutdownFile_upmuDataProtobuf_2eproto();

class syncOutput;
class upmuData;

// ===================================================================

class syncOutput : public ::google::protobuf::Message {
 public:
  syncOutput();
  virtual ~syncOutput();

  syncOutput(const syncOutput& from);

  inline syncOutput& operator=(const syncOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const syncOutput& default_instance();

  void Swap(syncOutput* other);

  // implements Message ----------------------------------------------

  syncOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const syncOutput& from);
  void MergeFrom(const syncOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lockState = 1;
  inline bool has_lockstate() const;
  inline void clear_lockstate();
  static const int kLockStateFieldNumber = 1;
  inline ::google::protobuf::uint32 lockstate() const;
  inline void set_lockstate(::google::protobuf::uint32 value);

  // required float L1angle = 2;
  inline bool has_l1angle() const;
  inline void clear_l1angle();
  static const int kL1AngleFieldNumber = 2;
  inline float l1angle() const;
  inline void set_l1angle(float value);

  // required float L1mag = 3;
  inline bool has_l1mag() const;
  inline void clear_l1mag();
  static const int kL1MagFieldNumber = 3;
  inline float l1mag() const;
  inline void set_l1mag(float value);

  // required float L2angle = 4;
  inline bool has_l2angle() const;
  inline void clear_l2angle();
  static const int kL2AngleFieldNumber = 4;
  inline float l2angle() const;
  inline void set_l2angle(float value);

  // required float L2mag = 5;
  inline bool has_l2mag() const;
  inline void clear_l2mag();
  static const int kL2MagFieldNumber = 5;
  inline float l2mag() const;
  inline void set_l2mag(float value);

  // required float L3angle = 6;
  inline bool has_l3angle() const;
  inline void clear_l3angle();
  static const int kL3AngleFieldNumber = 6;
  inline float l3angle() const;
  inline void set_l3angle(float value);

  // required float L3mag = 7;
  inline bool has_l3mag() const;
  inline void clear_l3mag();
  static const int kL3MagFieldNumber = 7;
  inline float l3mag() const;
  inline void set_l3mag(float value);

  // required float C1angle = 8;
  inline bool has_c1angle() const;
  inline void clear_c1angle();
  static const int kC1AngleFieldNumber = 8;
  inline float c1angle() const;
  inline void set_c1angle(float value);

  // required float C1mag = 9;
  inline bool has_c1mag() const;
  inline void clear_c1mag();
  static const int kC1MagFieldNumber = 9;
  inline float c1mag() const;
  inline void set_c1mag(float value);

  // required float C2angle = 10;
  inline bool has_c2angle() const;
  inline void clear_c2angle();
  static const int kC2AngleFieldNumber = 10;
  inline float c2angle() const;
  inline void set_c2angle(float value);

  // required float C2mag = 11;
  inline bool has_c2mag() const;
  inline void clear_c2mag();
  static const int kC2MagFieldNumber = 11;
  inline float c2mag() const;
  inline void set_c2mag(float value);

  // required float C3angle = 12;
  inline bool has_c3angle() const;
  inline void clear_c3angle();
  static const int kC3AngleFieldNumber = 12;
  inline float c3angle() const;
  inline void set_c3angle(float value);

  // required float C3mag = 13;
  inline bool has_c3mag() const;
  inline void clear_c3mag();
  static const int kC3MagFieldNumber = 13;
  inline float c3mag() const;
  inline void set_c3mag(float value);

  // @@protoc_insertion_point(class_scope:serviceCommon.syncOutput)
 private:
  inline void set_has_lockstate();
  inline void clear_has_lockstate();
  inline void set_has_l1angle();
  inline void clear_has_l1angle();
  inline void set_has_l1mag();
  inline void clear_has_l1mag();
  inline void set_has_l2angle();
  inline void clear_has_l2angle();
  inline void set_has_l2mag();
  inline void clear_has_l2mag();
  inline void set_has_l3angle();
  inline void clear_has_l3angle();
  inline void set_has_l3mag();
  inline void clear_has_l3mag();
  inline void set_has_c1angle();
  inline void clear_has_c1angle();
  inline void set_has_c1mag();
  inline void clear_has_c1mag();
  inline void set_has_c2angle();
  inline void clear_has_c2angle();
  inline void set_has_c2mag();
  inline void clear_has_c2mag();
  inline void set_has_c3angle();
  inline void clear_has_c3angle();
  inline void set_has_c3mag();
  inline void clear_has_c3mag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 lockstate_;
  float l1angle_;
  float l1mag_;
  float l2angle_;
  float l2mag_;
  float l3angle_;
  float l3mag_;
  float c1angle_;
  float c1mag_;
  float c2angle_;
  float c2mag_;
  float c3angle_;
  float c3mag_;
  friend void  protobuf_AddDesc_upmuDataProtobuf_2eproto();
  friend void protobuf_AssignDesc_upmuDataProtobuf_2eproto();
  friend void protobuf_ShutdownFile_upmuDataProtobuf_2eproto();

  void InitAsDefaultInstance();
  static syncOutput* default_instance_;
};
// -------------------------------------------------------------------

class upmuData : public ::google::protobuf::Message {
 public:
  upmuData();
  virtual ~upmuData();

  upmuData(const upmuData& from);

  inline upmuData& operator=(const upmuData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upmuData& default_instance();

  void Swap(upmuData* other);

  // implements Message ----------------------------------------------

  upmuData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upmuData& from);
  void MergeFrom(const upmuData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 timeStamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // required float sampleIntervalMsec = 2;
  inline bool has_sampleintervalmsec() const;
  inline void clear_sampleintervalmsec();
  static const int kSampleIntervalMsecFieldNumber = 2;
  inline float sampleintervalmsec() const;
  inline void set_sampleintervalmsec(float value);

  // required uint32 numSamples = 3;
  inline bool has_numsamples() const;
  inline void clear_numsamples();
  static const int kNumSamplesFieldNumber = 3;
  inline ::google::protobuf::uint32 numsamples() const;
  inline void set_numsamples(::google::protobuf::uint32 value);

  // repeated .serviceCommon.syncOutput sample = 4;
  inline int sample_size() const;
  inline void clear_sample();
  static const int kSampleFieldNumber = 4;
  inline const ::serviceCommon::syncOutput& sample(int index) const;
  inline ::serviceCommon::syncOutput* mutable_sample(int index);
  inline ::serviceCommon::syncOutput* add_sample();
  inline const ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutput >&
      sample() const;
  inline ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutput >*
      mutable_sample();

  // @@protoc_insertion_point(class_scope:serviceCommon.upmuData)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sampleintervalmsec();
  inline void clear_has_sampleintervalmsec();
  inline void set_has_numsamples();
  inline void clear_has_numsamples();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 timestamp_;
  float sampleintervalmsec_;
  ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutput > sample_;
  ::google::protobuf::uint32 numsamples_;
  friend void  protobuf_AddDesc_upmuDataProtobuf_2eproto();
  friend void protobuf_AssignDesc_upmuDataProtobuf_2eproto();
  friend void protobuf_ShutdownFile_upmuDataProtobuf_2eproto();

  void InitAsDefaultInstance();
  static upmuData* default_instance_;
};
// ===================================================================


// ===================================================================

// syncOutput

// required uint32 lockState = 1;
inline bool syncOutput::has_lockstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void syncOutput::set_has_lockstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void syncOutput::clear_has_lockstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void syncOutput::clear_lockstate() {
  lockstate_ = 0u;
  clear_has_lockstate();
}
inline ::google::protobuf::uint32 syncOutput::lockstate() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.lockState)
  return lockstate_;
}
inline void syncOutput::set_lockstate(::google::protobuf::uint32 value) {
  set_has_lockstate();
  lockstate_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.lockState)
}

// required float L1angle = 2;
inline bool syncOutput::has_l1angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void syncOutput::set_has_l1angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void syncOutput::clear_has_l1angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void syncOutput::clear_l1angle() {
  l1angle_ = 0;
  clear_has_l1angle();
}
inline float syncOutput::l1angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.L1angle)
  return l1angle_;
}
inline void syncOutput::set_l1angle(float value) {
  set_has_l1angle();
  l1angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.L1angle)
}

// required float L1mag = 3;
inline bool syncOutput::has_l1mag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void syncOutput::set_has_l1mag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void syncOutput::clear_has_l1mag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void syncOutput::clear_l1mag() {
  l1mag_ = 0;
  clear_has_l1mag();
}
inline float syncOutput::l1mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.L1mag)
  return l1mag_;
}
inline void syncOutput::set_l1mag(float value) {
  set_has_l1mag();
  l1mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.L1mag)
}

// required float L2angle = 4;
inline bool syncOutput::has_l2angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void syncOutput::set_has_l2angle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void syncOutput::clear_has_l2angle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void syncOutput::clear_l2angle() {
  l2angle_ = 0;
  clear_has_l2angle();
}
inline float syncOutput::l2angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.L2angle)
  return l2angle_;
}
inline void syncOutput::set_l2angle(float value) {
  set_has_l2angle();
  l2angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.L2angle)
}

// required float L2mag = 5;
inline bool syncOutput::has_l2mag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void syncOutput::set_has_l2mag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void syncOutput::clear_has_l2mag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void syncOutput::clear_l2mag() {
  l2mag_ = 0;
  clear_has_l2mag();
}
inline float syncOutput::l2mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.L2mag)
  return l2mag_;
}
inline void syncOutput::set_l2mag(float value) {
  set_has_l2mag();
  l2mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.L2mag)
}

// required float L3angle = 6;
inline bool syncOutput::has_l3angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void syncOutput::set_has_l3angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void syncOutput::clear_has_l3angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void syncOutput::clear_l3angle() {
  l3angle_ = 0;
  clear_has_l3angle();
}
inline float syncOutput::l3angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.L3angle)
  return l3angle_;
}
inline void syncOutput::set_l3angle(float value) {
  set_has_l3angle();
  l3angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.L3angle)
}

// required float L3mag = 7;
inline bool syncOutput::has_l3mag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void syncOutput::set_has_l3mag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void syncOutput::clear_has_l3mag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void syncOutput::clear_l3mag() {
  l3mag_ = 0;
  clear_has_l3mag();
}
inline float syncOutput::l3mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.L3mag)
  return l3mag_;
}
inline void syncOutput::set_l3mag(float value) {
  set_has_l3mag();
  l3mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.L3mag)
}

// required float C1angle = 8;
inline bool syncOutput::has_c1angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void syncOutput::set_has_c1angle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void syncOutput::clear_has_c1angle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void syncOutput::clear_c1angle() {
  c1angle_ = 0;
  clear_has_c1angle();
}
inline float syncOutput::c1angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.C1angle)
  return c1angle_;
}
inline void syncOutput::set_c1angle(float value) {
  set_has_c1angle();
  c1angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.C1angle)
}

// required float C1mag = 9;
inline bool syncOutput::has_c1mag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void syncOutput::set_has_c1mag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void syncOutput::clear_has_c1mag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void syncOutput::clear_c1mag() {
  c1mag_ = 0;
  clear_has_c1mag();
}
inline float syncOutput::c1mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.C1mag)
  return c1mag_;
}
inline void syncOutput::set_c1mag(float value) {
  set_has_c1mag();
  c1mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.C1mag)
}

// required float C2angle = 10;
inline bool syncOutput::has_c2angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void syncOutput::set_has_c2angle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void syncOutput::clear_has_c2angle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void syncOutput::clear_c2angle() {
  c2angle_ = 0;
  clear_has_c2angle();
}
inline float syncOutput::c2angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.C2angle)
  return c2angle_;
}
inline void syncOutput::set_c2angle(float value) {
  set_has_c2angle();
  c2angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.C2angle)
}

// required float C2mag = 11;
inline bool syncOutput::has_c2mag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void syncOutput::set_has_c2mag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void syncOutput::clear_has_c2mag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void syncOutput::clear_c2mag() {
  c2mag_ = 0;
  clear_has_c2mag();
}
inline float syncOutput::c2mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.C2mag)
  return c2mag_;
}
inline void syncOutput::set_c2mag(float value) {
  set_has_c2mag();
  c2mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.C2mag)
}

// required float C3angle = 12;
inline bool syncOutput::has_c3angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void syncOutput::set_has_c3angle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void syncOutput::clear_has_c3angle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void syncOutput::clear_c3angle() {
  c3angle_ = 0;
  clear_has_c3angle();
}
inline float syncOutput::c3angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.C3angle)
  return c3angle_;
}
inline void syncOutput::set_c3angle(float value) {
  set_has_c3angle();
  c3angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.C3angle)
}

// required float C3mag = 13;
inline bool syncOutput::has_c3mag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void syncOutput::set_has_c3mag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void syncOutput::clear_has_c3mag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void syncOutput::clear_c3mag() {
  c3mag_ = 0;
  clear_has_c3mag();
}
inline float syncOutput::c3mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutput.C3mag)
  return c3mag_;
}
inline void syncOutput::set_c3mag(float value) {
  set_has_c3mag();
  c3mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutput.C3mag)
}

// -------------------------------------------------------------------

// upmuData

// required uint32 timeStamp = 1;
inline bool upmuData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upmuData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upmuData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upmuData::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 upmuData::timestamp() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuData.timeStamp)
  return timestamp_;
}
inline void upmuData::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.upmuData.timeStamp)
}

// required float sampleIntervalMsec = 2;
inline bool upmuData::has_sampleintervalmsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upmuData::set_has_sampleintervalmsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upmuData::clear_has_sampleintervalmsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upmuData::clear_sampleintervalmsec() {
  sampleintervalmsec_ = 0;
  clear_has_sampleintervalmsec();
}
inline float upmuData::sampleintervalmsec() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuData.sampleIntervalMsec)
  return sampleintervalmsec_;
}
inline void upmuData::set_sampleintervalmsec(float value) {
  set_has_sampleintervalmsec();
  sampleintervalmsec_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.upmuData.sampleIntervalMsec)
}

// required uint32 numSamples = 3;
inline bool upmuData::has_numsamples() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void upmuData::set_has_numsamples() {
  _has_bits_[0] |= 0x00000004u;
}
inline void upmuData::clear_has_numsamples() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void upmuData::clear_numsamples() {
  numsamples_ = 0u;
  clear_has_numsamples();
}
inline ::google::protobuf::uint32 upmuData::numsamples() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuData.numSamples)
  return numsamples_;
}
inline void upmuData::set_numsamples(::google::protobuf::uint32 value) {
  set_has_numsamples();
  numsamples_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.upmuData.numSamples)
}

// repeated .serviceCommon.syncOutput sample = 4;
inline int upmuData::sample_size() const {
  return sample_.size();
}
inline void upmuData::clear_sample() {
  sample_.Clear();
}
inline const ::serviceCommon::syncOutput& upmuData::sample(int index) const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuData.sample)
  return sample_.Get(index);
}
inline ::serviceCommon::syncOutput* upmuData::mutable_sample(int index) {
  // @@protoc_insertion_point(field_mutable:serviceCommon.upmuData.sample)
  return sample_.Mutable(index);
}
inline ::serviceCommon::syncOutput* upmuData::add_sample() {
  // @@protoc_insertion_point(field_add:serviceCommon.upmuData.sample)
  return sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutput >&
upmuData::sample() const {
  // @@protoc_insertion_point(field_list:serviceCommon.upmuData.sample)
  return sample_;
}
inline ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutput >*
upmuData::mutable_sample() {
  // @@protoc_insertion_point(field_mutable_list:serviceCommon.upmuData.sample)
  return &sample_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serviceCommon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_upmuDataProtobuf_2eproto__INCLUDED
