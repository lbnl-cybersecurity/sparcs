// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: upmuDataProtobufRabbitMQ.proto

#ifndef PROTOBUF_upmuDataProtobufRabbitMQ_2eproto__INCLUDED
#define PROTOBUF_upmuDataProtobufRabbitMQ_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace serviceCommon {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_upmuDataProtobufRabbitMQ_2eproto();
void protobuf_AssignDesc_upmuDataProtobufRabbitMQ_2eproto();
void protobuf_ShutdownFile_upmuDataProtobufRabbitMQ_2eproto();

class syncOutputRabbit;
class upmuDataRabbit;

// ===================================================================

class syncOutputRabbit : public ::google::protobuf::Message {
 public:
  syncOutputRabbit();
  virtual ~syncOutputRabbit();

  syncOutputRabbit(const syncOutputRabbit& from);

  inline syncOutputRabbit& operator=(const syncOutputRabbit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const syncOutputRabbit& default_instance();

  void Swap(syncOutputRabbit* other);

  // implements Message ----------------------------------------------

  syncOutputRabbit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const syncOutputRabbit& from);
  void MergeFrom(const syncOutputRabbit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lockState = 1;
  inline bool has_lockstate() const;
  inline void clear_lockstate();
  static const int kLockStateFieldNumber = 1;
  inline ::google::protobuf::uint32 lockstate() const;
  inline void set_lockstate(::google::protobuf::uint32 value);

  // required float L1angle = 2;
  inline bool has_l1angle() const;
  inline void clear_l1angle();
  static const int kL1AngleFieldNumber = 2;
  inline float l1angle() const;
  inline void set_l1angle(float value);

  // required float L1mag = 3;
  inline bool has_l1mag() const;
  inline void clear_l1mag();
  static const int kL1MagFieldNumber = 3;
  inline float l1mag() const;
  inline void set_l1mag(float value);

  // required float L2angle = 4;
  inline bool has_l2angle() const;
  inline void clear_l2angle();
  static const int kL2AngleFieldNumber = 4;
  inline float l2angle() const;
  inline void set_l2angle(float value);

  // required float L2mag = 5;
  inline bool has_l2mag() const;
  inline void clear_l2mag();
  static const int kL2MagFieldNumber = 5;
  inline float l2mag() const;
  inline void set_l2mag(float value);

  // required float L3angle = 6;
  inline bool has_l3angle() const;
  inline void clear_l3angle();
  static const int kL3AngleFieldNumber = 6;
  inline float l3angle() const;
  inline void set_l3angle(float value);

  // required float L3mag = 7;
  inline bool has_l3mag() const;
  inline void clear_l3mag();
  static const int kL3MagFieldNumber = 7;
  inline float l3mag() const;
  inline void set_l3mag(float value);

  // required float C1angle = 8;
  inline bool has_c1angle() const;
  inline void clear_c1angle();
  static const int kC1AngleFieldNumber = 8;
  inline float c1angle() const;
  inline void set_c1angle(float value);

  // required float C1mag = 9;
  inline bool has_c1mag() const;
  inline void clear_c1mag();
  static const int kC1MagFieldNumber = 9;
  inline float c1mag() const;
  inline void set_c1mag(float value);

  // required float C2angle = 10;
  inline bool has_c2angle() const;
  inline void clear_c2angle();
  static const int kC2AngleFieldNumber = 10;
  inline float c2angle() const;
  inline void set_c2angle(float value);

  // required float C2mag = 11;
  inline bool has_c2mag() const;
  inline void clear_c2mag();
  static const int kC2MagFieldNumber = 11;
  inline float c2mag() const;
  inline void set_c2mag(float value);

  // required float C3angle = 12;
  inline bool has_c3angle() const;
  inline void clear_c3angle();
  static const int kC3AngleFieldNumber = 12;
  inline float c3angle() const;
  inline void set_c3angle(float value);

  // required float C3mag = 13;
  inline bool has_c3mag() const;
  inline void clear_c3mag();
  static const int kC3MagFieldNumber = 13;
  inline float c3mag() const;
  inline void set_c3mag(float value);

  // @@protoc_insertion_point(class_scope:serviceCommon.syncOutputRabbit)
 private:
  inline void set_has_lockstate();
  inline void clear_has_lockstate();
  inline void set_has_l1angle();
  inline void clear_has_l1angle();
  inline void set_has_l1mag();
  inline void clear_has_l1mag();
  inline void set_has_l2angle();
  inline void clear_has_l2angle();
  inline void set_has_l2mag();
  inline void clear_has_l2mag();
  inline void set_has_l3angle();
  inline void clear_has_l3angle();
  inline void set_has_l3mag();
  inline void clear_has_l3mag();
  inline void set_has_c1angle();
  inline void clear_has_c1angle();
  inline void set_has_c1mag();
  inline void clear_has_c1mag();
  inline void set_has_c2angle();
  inline void clear_has_c2angle();
  inline void set_has_c2mag();
  inline void clear_has_c2mag();
  inline void set_has_c3angle();
  inline void clear_has_c3angle();
  inline void set_has_c3mag();
  inline void clear_has_c3mag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 lockstate_;
  float l1angle_;
  float l1mag_;
  float l2angle_;
  float l2mag_;
  float l3angle_;
  float l3mag_;
  float c1angle_;
  float c1mag_;
  float c2angle_;
  float c2mag_;
  float c3angle_;
  float c3mag_;
  friend void  protobuf_AddDesc_upmuDataProtobufRabbitMQ_2eproto();
  friend void protobuf_AssignDesc_upmuDataProtobufRabbitMQ_2eproto();
  friend void protobuf_ShutdownFile_upmuDataProtobufRabbitMQ_2eproto();

  void InitAsDefaultInstance();
  static syncOutputRabbit* default_instance_;
};
// -------------------------------------------------------------------

class upmuDataRabbit : public ::google::protobuf::Message {
 public:
  upmuDataRabbit();
  virtual ~upmuDataRabbit();

  upmuDataRabbit(const upmuDataRabbit& from);

  inline upmuDataRabbit& operator=(const upmuDataRabbit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upmuDataRabbit& default_instance();

  void Swap(upmuDataRabbit* other);

  // implements Message ----------------------------------------------

  upmuDataRabbit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upmuDataRabbit& from);
  void MergeFrom(const upmuDataRabbit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 timeStampMsec = 1;
  inline bool has_timestampmsec() const;
  inline void clear_timestampmsec();
  static const int kTimeStampMsecFieldNumber = 1;
  inline ::google::protobuf::uint64 timestampmsec() const;
  inline void set_timestampmsec(::google::protobuf::uint64 value);

  // required string device = 2;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 2;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // required uint32 domainType = 3;
  inline bool has_domaintype() const;
  inline void clear_domaintype();
  static const int kDomainTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 domaintype() const;
  inline void set_domaintype(::google::protobuf::uint32 value);

  // required uint32 msgType = 4;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 msgtype() const;
  inline void set_msgtype(::google::protobuf::uint32 value);

  // required float sampleIntervalMsec = 5;
  inline bool has_sampleintervalmsec() const;
  inline void clear_sampleintervalmsec();
  static const int kSampleIntervalMsecFieldNumber = 5;
  inline float sampleintervalmsec() const;
  inline void set_sampleintervalmsec(float value);

  // required uint32 numSamples = 6;
  inline bool has_numsamples() const;
  inline void clear_numsamples();
  static const int kNumSamplesFieldNumber = 6;
  inline ::google::protobuf::uint32 numsamples() const;
  inline void set_numsamples(::google::protobuf::uint32 value);

  // repeated .serviceCommon.syncOutputRabbit sample = 7;
  inline int sample_size() const;
  inline void clear_sample();
  static const int kSampleFieldNumber = 7;
  inline const ::serviceCommon::syncOutputRabbit& sample(int index) const;
  inline ::serviceCommon::syncOutputRabbit* mutable_sample(int index);
  inline ::serviceCommon::syncOutputRabbit* add_sample();
  inline const ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutputRabbit >&
      sample() const;
  inline ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutputRabbit >*
      mutable_sample();

  // @@protoc_insertion_point(class_scope:serviceCommon.upmuDataRabbit)
 private:
  inline void set_has_timestampmsec();
  inline void clear_has_timestampmsec();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_domaintype();
  inline void clear_has_domaintype();
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_sampleintervalmsec();
  inline void clear_has_sampleintervalmsec();
  inline void set_has_numsamples();
  inline void clear_has_numsamples();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestampmsec_;
  ::std::string* device_;
  ::google::protobuf::uint32 domaintype_;
  ::google::protobuf::uint32 msgtype_;
  float sampleintervalmsec_;
  ::google::protobuf::uint32 numsamples_;
  ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutputRabbit > sample_;
  friend void  protobuf_AddDesc_upmuDataProtobufRabbitMQ_2eproto();
  friend void protobuf_AssignDesc_upmuDataProtobufRabbitMQ_2eproto();
  friend void protobuf_ShutdownFile_upmuDataProtobufRabbitMQ_2eproto();

  void InitAsDefaultInstance();
  static upmuDataRabbit* default_instance_;
};
// ===================================================================


// ===================================================================

// syncOutputRabbit

// required uint32 lockState = 1;
inline bool syncOutputRabbit::has_lockstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void syncOutputRabbit::set_has_lockstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void syncOutputRabbit::clear_has_lockstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void syncOutputRabbit::clear_lockstate() {
  lockstate_ = 0u;
  clear_has_lockstate();
}
inline ::google::protobuf::uint32 syncOutputRabbit::lockstate() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.lockState)
  return lockstate_;
}
inline void syncOutputRabbit::set_lockstate(::google::protobuf::uint32 value) {
  set_has_lockstate();
  lockstate_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.lockState)
}

// required float L1angle = 2;
inline bool syncOutputRabbit::has_l1angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void syncOutputRabbit::set_has_l1angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void syncOutputRabbit::clear_has_l1angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void syncOutputRabbit::clear_l1angle() {
  l1angle_ = 0;
  clear_has_l1angle();
}
inline float syncOutputRabbit::l1angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.L1angle)
  return l1angle_;
}
inline void syncOutputRabbit::set_l1angle(float value) {
  set_has_l1angle();
  l1angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.L1angle)
}

// required float L1mag = 3;
inline bool syncOutputRabbit::has_l1mag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void syncOutputRabbit::set_has_l1mag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void syncOutputRabbit::clear_has_l1mag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void syncOutputRabbit::clear_l1mag() {
  l1mag_ = 0;
  clear_has_l1mag();
}
inline float syncOutputRabbit::l1mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.L1mag)
  return l1mag_;
}
inline void syncOutputRabbit::set_l1mag(float value) {
  set_has_l1mag();
  l1mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.L1mag)
}

// required float L2angle = 4;
inline bool syncOutputRabbit::has_l2angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void syncOutputRabbit::set_has_l2angle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void syncOutputRabbit::clear_has_l2angle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void syncOutputRabbit::clear_l2angle() {
  l2angle_ = 0;
  clear_has_l2angle();
}
inline float syncOutputRabbit::l2angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.L2angle)
  return l2angle_;
}
inline void syncOutputRabbit::set_l2angle(float value) {
  set_has_l2angle();
  l2angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.L2angle)
}

// required float L2mag = 5;
inline bool syncOutputRabbit::has_l2mag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void syncOutputRabbit::set_has_l2mag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void syncOutputRabbit::clear_has_l2mag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void syncOutputRabbit::clear_l2mag() {
  l2mag_ = 0;
  clear_has_l2mag();
}
inline float syncOutputRabbit::l2mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.L2mag)
  return l2mag_;
}
inline void syncOutputRabbit::set_l2mag(float value) {
  set_has_l2mag();
  l2mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.L2mag)
}

// required float L3angle = 6;
inline bool syncOutputRabbit::has_l3angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void syncOutputRabbit::set_has_l3angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void syncOutputRabbit::clear_has_l3angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void syncOutputRabbit::clear_l3angle() {
  l3angle_ = 0;
  clear_has_l3angle();
}
inline float syncOutputRabbit::l3angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.L3angle)
  return l3angle_;
}
inline void syncOutputRabbit::set_l3angle(float value) {
  set_has_l3angle();
  l3angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.L3angle)
}

// required float L3mag = 7;
inline bool syncOutputRabbit::has_l3mag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void syncOutputRabbit::set_has_l3mag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void syncOutputRabbit::clear_has_l3mag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void syncOutputRabbit::clear_l3mag() {
  l3mag_ = 0;
  clear_has_l3mag();
}
inline float syncOutputRabbit::l3mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.L3mag)
  return l3mag_;
}
inline void syncOutputRabbit::set_l3mag(float value) {
  set_has_l3mag();
  l3mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.L3mag)
}

// required float C1angle = 8;
inline bool syncOutputRabbit::has_c1angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void syncOutputRabbit::set_has_c1angle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void syncOutputRabbit::clear_has_c1angle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void syncOutputRabbit::clear_c1angle() {
  c1angle_ = 0;
  clear_has_c1angle();
}
inline float syncOutputRabbit::c1angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.C1angle)
  return c1angle_;
}
inline void syncOutputRabbit::set_c1angle(float value) {
  set_has_c1angle();
  c1angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.C1angle)
}

// required float C1mag = 9;
inline bool syncOutputRabbit::has_c1mag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void syncOutputRabbit::set_has_c1mag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void syncOutputRabbit::clear_has_c1mag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void syncOutputRabbit::clear_c1mag() {
  c1mag_ = 0;
  clear_has_c1mag();
}
inline float syncOutputRabbit::c1mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.C1mag)
  return c1mag_;
}
inline void syncOutputRabbit::set_c1mag(float value) {
  set_has_c1mag();
  c1mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.C1mag)
}

// required float C2angle = 10;
inline bool syncOutputRabbit::has_c2angle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void syncOutputRabbit::set_has_c2angle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void syncOutputRabbit::clear_has_c2angle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void syncOutputRabbit::clear_c2angle() {
  c2angle_ = 0;
  clear_has_c2angle();
}
inline float syncOutputRabbit::c2angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.C2angle)
  return c2angle_;
}
inline void syncOutputRabbit::set_c2angle(float value) {
  set_has_c2angle();
  c2angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.C2angle)
}

// required float C2mag = 11;
inline bool syncOutputRabbit::has_c2mag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void syncOutputRabbit::set_has_c2mag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void syncOutputRabbit::clear_has_c2mag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void syncOutputRabbit::clear_c2mag() {
  c2mag_ = 0;
  clear_has_c2mag();
}
inline float syncOutputRabbit::c2mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.C2mag)
  return c2mag_;
}
inline void syncOutputRabbit::set_c2mag(float value) {
  set_has_c2mag();
  c2mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.C2mag)
}

// required float C3angle = 12;
inline bool syncOutputRabbit::has_c3angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void syncOutputRabbit::set_has_c3angle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void syncOutputRabbit::clear_has_c3angle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void syncOutputRabbit::clear_c3angle() {
  c3angle_ = 0;
  clear_has_c3angle();
}
inline float syncOutputRabbit::c3angle() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.C3angle)
  return c3angle_;
}
inline void syncOutputRabbit::set_c3angle(float value) {
  set_has_c3angle();
  c3angle_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.C3angle)
}

// required float C3mag = 13;
inline bool syncOutputRabbit::has_c3mag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void syncOutputRabbit::set_has_c3mag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void syncOutputRabbit::clear_has_c3mag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void syncOutputRabbit::clear_c3mag() {
  c3mag_ = 0;
  clear_has_c3mag();
}
inline float syncOutputRabbit::c3mag() const {
  // @@protoc_insertion_point(field_get:serviceCommon.syncOutputRabbit.C3mag)
  return c3mag_;
}
inline void syncOutputRabbit::set_c3mag(float value) {
  set_has_c3mag();
  c3mag_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.syncOutputRabbit.C3mag)
}

// -------------------------------------------------------------------

// upmuDataRabbit

// required uint64 timeStampMsec = 1;
inline bool upmuDataRabbit::has_timestampmsec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upmuDataRabbit::set_has_timestampmsec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upmuDataRabbit::clear_has_timestampmsec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upmuDataRabbit::clear_timestampmsec() {
  timestampmsec_ = GOOGLE_ULONGLONG(0);
  clear_has_timestampmsec();
}
inline ::google::protobuf::uint64 upmuDataRabbit::timestampmsec() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuDataRabbit.timeStampMsec)
  return timestampmsec_;
}
inline void upmuDataRabbit::set_timestampmsec(::google::protobuf::uint64 value) {
  set_has_timestampmsec();
  timestampmsec_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.upmuDataRabbit.timeStampMsec)
}

// required string device = 2;
inline bool upmuDataRabbit::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upmuDataRabbit::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upmuDataRabbit::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upmuDataRabbit::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& upmuDataRabbit::device() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuDataRabbit.device)
  return *device_;
}
inline void upmuDataRabbit::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:serviceCommon.upmuDataRabbit.device)
}
inline void upmuDataRabbit::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:serviceCommon.upmuDataRabbit.device)
}
inline void upmuDataRabbit::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:serviceCommon.upmuDataRabbit.device)
}
inline ::std::string* upmuDataRabbit::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:serviceCommon.upmuDataRabbit.device)
  return device_;
}
inline ::std::string* upmuDataRabbit::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void upmuDataRabbit::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:serviceCommon.upmuDataRabbit.device)
}

// required uint32 domainType = 3;
inline bool upmuDataRabbit::has_domaintype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void upmuDataRabbit::set_has_domaintype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void upmuDataRabbit::clear_has_domaintype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void upmuDataRabbit::clear_domaintype() {
  domaintype_ = 0u;
  clear_has_domaintype();
}
inline ::google::protobuf::uint32 upmuDataRabbit::domaintype() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuDataRabbit.domainType)
  return domaintype_;
}
inline void upmuDataRabbit::set_domaintype(::google::protobuf::uint32 value) {
  set_has_domaintype();
  domaintype_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.upmuDataRabbit.domainType)
}

// required uint32 msgType = 4;
inline bool upmuDataRabbit::has_msgtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void upmuDataRabbit::set_has_msgtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void upmuDataRabbit::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void upmuDataRabbit::clear_msgtype() {
  msgtype_ = 0u;
  clear_has_msgtype();
}
inline ::google::protobuf::uint32 upmuDataRabbit::msgtype() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuDataRabbit.msgType)
  return msgtype_;
}
inline void upmuDataRabbit::set_msgtype(::google::protobuf::uint32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.upmuDataRabbit.msgType)
}

// required float sampleIntervalMsec = 5;
inline bool upmuDataRabbit::has_sampleintervalmsec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void upmuDataRabbit::set_has_sampleintervalmsec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void upmuDataRabbit::clear_has_sampleintervalmsec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void upmuDataRabbit::clear_sampleintervalmsec() {
  sampleintervalmsec_ = 0;
  clear_has_sampleintervalmsec();
}
inline float upmuDataRabbit::sampleintervalmsec() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuDataRabbit.sampleIntervalMsec)
  return sampleintervalmsec_;
}
inline void upmuDataRabbit::set_sampleintervalmsec(float value) {
  set_has_sampleintervalmsec();
  sampleintervalmsec_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.upmuDataRabbit.sampleIntervalMsec)
}

// required uint32 numSamples = 6;
inline bool upmuDataRabbit::has_numsamples() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void upmuDataRabbit::set_has_numsamples() {
  _has_bits_[0] |= 0x00000020u;
}
inline void upmuDataRabbit::clear_has_numsamples() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void upmuDataRabbit::clear_numsamples() {
  numsamples_ = 0u;
  clear_has_numsamples();
}
inline ::google::protobuf::uint32 upmuDataRabbit::numsamples() const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuDataRabbit.numSamples)
  return numsamples_;
}
inline void upmuDataRabbit::set_numsamples(::google::protobuf::uint32 value) {
  set_has_numsamples();
  numsamples_ = value;
  // @@protoc_insertion_point(field_set:serviceCommon.upmuDataRabbit.numSamples)
}

// repeated .serviceCommon.syncOutputRabbit sample = 7;
inline int upmuDataRabbit::sample_size() const {
  return sample_.size();
}
inline void upmuDataRabbit::clear_sample() {
  sample_.Clear();
}
inline const ::serviceCommon::syncOutputRabbit& upmuDataRabbit::sample(int index) const {
  // @@protoc_insertion_point(field_get:serviceCommon.upmuDataRabbit.sample)
  return sample_.Get(index);
}
inline ::serviceCommon::syncOutputRabbit* upmuDataRabbit::mutable_sample(int index) {
  // @@protoc_insertion_point(field_mutable:serviceCommon.upmuDataRabbit.sample)
  return sample_.Mutable(index);
}
inline ::serviceCommon::syncOutputRabbit* upmuDataRabbit::add_sample() {
  // @@protoc_insertion_point(field_add:serviceCommon.upmuDataRabbit.sample)
  return sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutputRabbit >&
upmuDataRabbit::sample() const {
  // @@protoc_insertion_point(field_list:serviceCommon.upmuDataRabbit.sample)
  return sample_;
}
inline ::google::protobuf::RepeatedPtrField< ::serviceCommon::syncOutputRabbit >*
upmuDataRabbit::mutable_sample() {
  // @@protoc_insertion_point(field_mutable_list:serviceCommon.upmuDataRabbit.sample)
  return &sample_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serviceCommon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_upmuDataProtobufRabbitMQ_2eproto__INCLUDED
