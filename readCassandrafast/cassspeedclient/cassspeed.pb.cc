// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cassspeed.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cassspeed.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace serviceCassSpeed {

namespace {

const ::google::protobuf::Descriptor* samplesets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  samplesets_reflection_ = NULL;
const ::google::protobuf::Descriptor* output_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  output_reflection_ = NULL;
const ::google::protobuf::Descriptor* cassspeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cassspeed_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cassspeed_2eproto() {
  protobuf_AddDesc_cassspeed_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cassspeed.proto");
  GOOGLE_CHECK(file != NULL);
  samplesets_descriptor_ = file->message_type(0);
  static const int samplesets_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(samplesets, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(samplesets, compression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(samplesets, sample_),
  };
  samplesets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      samplesets_descriptor_,
      samplesets::default_instance_,
      samplesets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(samplesets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(samplesets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(samplesets));
  output_descriptor_ = file->message_type(1);
  static const int output_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(output, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(output, sampleset_),
  };
  output_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      output_descriptor_,
      output::default_instance_,
      output_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(output, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(output, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(output));
  cassspeed_descriptor_ = file->message_type(2);
  static const int cassspeed_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cassspeed, timestampstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cassspeed, timestampend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cassspeed, sampleintervalmsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cassspeed, numsamples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cassspeed, numdevices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cassspeed, outputsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cassspeed, status_),
  };
  cassspeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cassspeed_descriptor_,
      cassspeed::default_instance_,
      cassspeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cassspeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cassspeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cassspeed));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cassspeed_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    samplesets_descriptor_, &samplesets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    output_descriptor_, &output::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cassspeed_descriptor_, &cassspeed::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cassspeed_2eproto() {
  delete samplesets::default_instance_;
  delete samplesets_reflection_;
  delete output::default_instance_;
  delete output_reflection_;
  delete cassspeed::default_instance_;
  delete cassspeed_reflection_;
}

void protobuf_AddDesc_cassspeed_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cassspeed.proto\022\020serviceCassSpeed\"C\n\ns"
    "amplesets\022\014\n\004name\030\001 \002(\t\022\023\n\013compression\030\002"
    " \001(\t\022\022\n\006sample\030\003 \003(\002B\002\020\001\"K\n\006output\022\020\n\010de"
    "viceid\030\001 \002(\t\022/\n\tsampleset\030\002 \003(\0132\034.servic"
    "eCassSpeed.samplesets\"\273\001\n\tcassspeed\022\026\n\016t"
    "imeStampStart\030\001 \002(\004\022\024\n\014timeStampEnd\030\002 \001("
    "\004\022\032\n\022sampleIntervalMsec\030\003 \001(\002\022\022\n\nnumSamp"
    "les\030\004 \001(\r\022\022\n\nnumDevices\030\005 \001(\005\022,\n\noutputs"
    "ets\030\006 \003(\0132\030.serviceCassSpeed.output\022\016\n\006s"
    "tatus\030\007 \001(\005", 371);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cassspeed.proto", &protobuf_RegisterTypes);
  samplesets::default_instance_ = new samplesets();
  output::default_instance_ = new output();
  cassspeed::default_instance_ = new cassspeed();
  samplesets::default_instance_->InitAsDefaultInstance();
  output::default_instance_->InitAsDefaultInstance();
  cassspeed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cassspeed_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cassspeed_2eproto {
  StaticDescriptorInitializer_cassspeed_2eproto() {
    protobuf_AddDesc_cassspeed_2eproto();
  }
} static_descriptor_initializer_cassspeed_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int samplesets::kNameFieldNumber;
const int samplesets::kCompressionFieldNumber;
const int samplesets::kSampleFieldNumber;
#endif  // !_MSC_VER

samplesets::samplesets()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceCassSpeed.samplesets)
}

void samplesets::InitAsDefaultInstance() {
}

samplesets::samplesets(const samplesets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:serviceCassSpeed.samplesets)
}

void samplesets::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compression_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

samplesets::~samplesets() {
  // @@protoc_insertion_point(destructor:serviceCassSpeed.samplesets)
  SharedDtor();
}

void samplesets::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (compression_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compression_;
  }
  if (this != default_instance_) {
  }
}

void samplesets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* samplesets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return samplesets_descriptor_;
}

const samplesets& samplesets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cassspeed_2eproto();
  return *default_instance_;
}

samplesets* samplesets::default_instance_ = NULL;

samplesets* samplesets::New() const {
  return new samplesets;
}

void samplesets::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_compression()) {
      if (compression_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compression_->clear();
      }
    }
  }
  sample_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool samplesets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceCassSpeed.samplesets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_compression;
        break;
      }

      // optional string compression = 2;
      case 2: {
        if (tag == 18) {
         parse_compression:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compression()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compression().data(), this->compression().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compression");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sample;
        break;
      }

      // repeated float sample = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_sample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sample())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_sample())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceCassSpeed.samplesets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceCassSpeed.samplesets)
  return false;
#undef DO_
}

void samplesets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceCassSpeed.samplesets)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string compression = 2;
  if (has_compression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compression().data(), this->compression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compression");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->compression(), output);
  }

  // repeated float sample = 3 [packed = true];
  if (this->sample_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sample_cached_byte_size_);
  }
  for (int i = 0; i < this->sample_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->sample(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceCassSpeed.samplesets)
}

::google::protobuf::uint8* samplesets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceCassSpeed.samplesets)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string compression = 2;
  if (has_compression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compression().data(), this->compression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compression");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->compression(), target);
  }

  // repeated float sample = 3 [packed = true];
  if (this->sample_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sample_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sample_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sample(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceCassSpeed.samplesets)
  return target;
}

int samplesets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string compression = 2;
    if (has_compression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compression());
    }

  }
  // repeated float sample = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->sample_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sample_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void samplesets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const samplesets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const samplesets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void samplesets::MergeFrom(const samplesets& from) {
  GOOGLE_CHECK_NE(&from, this);
  sample_.MergeFrom(from.sample_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_compression()) {
      set_compression(from.compression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void samplesets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void samplesets::CopyFrom(const samplesets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool samplesets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void samplesets::Swap(samplesets* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(compression_, other->compression_);
    sample_.Swap(&other->sample_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata samplesets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = samplesets_descriptor_;
  metadata.reflection = samplesets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int output::kDeviceidFieldNumber;
const int output::kSamplesetFieldNumber;
#endif  // !_MSC_VER

output::output()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceCassSpeed.output)
}

void output::InitAsDefaultInstance() {
}

output::output(const output& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:serviceCassSpeed.output)
}

void output::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

output::~output() {
  // @@protoc_insertion_point(destructor:serviceCassSpeed.output)
  SharedDtor();
}

void output::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* output::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return output_descriptor_;
}

const output& output::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cassspeed_2eproto();
  return *default_instance_;
}

output* output::default_instance_ = NULL;

output* output::New() const {
  return new output;
}

void output::Clear() {
  if (has_deviceid()) {
    if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      deviceid_->clear();
    }
  }
  sampleset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceCassSpeed.output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string deviceid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sampleset;
        break;
      }

      // repeated .serviceCassSpeed.samplesets sampleset = 2;
      case 2: {
        if (tag == 18) {
         parse_sampleset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sampleset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sampleset;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceCassSpeed.output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceCassSpeed.output)
  return false;
#undef DO_
}

void output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceCassSpeed.output)
  // required string deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // repeated .serviceCassSpeed.samplesets sampleset = 2;
  for (int i = 0; i < this->sampleset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sampleset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceCassSpeed.output)
}

::google::protobuf::uint8* output::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceCassSpeed.output)
  // required string deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceid(), target);
  }

  // repeated .serviceCassSpeed.samplesets sampleset = 2;
  for (int i = 0; i < this->sampleset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sampleset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceCassSpeed.output)
  return target;
}

int output::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

  }
  // repeated .serviceCassSpeed.samplesets sampleset = 2;
  total_size += 1 * this->sampleset_size();
  for (int i = 0; i < this->sampleset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sampleset(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void output::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const output* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const output*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void output::MergeFrom(const output& from) {
  GOOGLE_CHECK_NE(&from, this);
  sampleset_.MergeFrom(from.sampleset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void output::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void output::CopyFrom(const output& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool output::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->sampleset())) return false;
  return true;
}

void output::Swap(output* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    sampleset_.Swap(&other->sampleset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata output::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = output_descriptor_;
  metadata.reflection = output_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cassspeed::kTimeStampStartFieldNumber;
const int cassspeed::kTimeStampEndFieldNumber;
const int cassspeed::kSampleIntervalMsecFieldNumber;
const int cassspeed::kNumSamplesFieldNumber;
const int cassspeed::kNumDevicesFieldNumber;
const int cassspeed::kOutputsetsFieldNumber;
const int cassspeed::kStatusFieldNumber;
#endif  // !_MSC_VER

cassspeed::cassspeed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serviceCassSpeed.cassspeed)
}

void cassspeed::InitAsDefaultInstance() {
}

cassspeed::cassspeed(const cassspeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:serviceCassSpeed.cassspeed)
}

void cassspeed::SharedCtor() {
  _cached_size_ = 0;
  timestampstart_ = GOOGLE_ULONGLONG(0);
  timestampend_ = GOOGLE_ULONGLONG(0);
  sampleintervalmsec_ = 0;
  numsamples_ = 0u;
  numdevices_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cassspeed::~cassspeed() {
  // @@protoc_insertion_point(destructor:serviceCassSpeed.cassspeed)
  SharedDtor();
}

void cassspeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cassspeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cassspeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cassspeed_descriptor_;
}

const cassspeed& cassspeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cassspeed_2eproto();
  return *default_instance_;
}

cassspeed* cassspeed::default_instance_ = NULL;

cassspeed* cassspeed::New() const {
  return new cassspeed;
}

void cassspeed::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<cassspeed*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(timestampstart_, numsamples_);
    ZR_(numdevices_, status_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  outputsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cassspeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:serviceCassSpeed.cassspeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timeStampStart = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampstart_)));
          set_has_timestampstart();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeStampEnd;
        break;
      }

      // optional uint64 timeStampEnd = 2;
      case 2: {
        if (tag == 16) {
         parse_timeStampEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestampend_)));
          set_has_timestampend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_sampleIntervalMsec;
        break;
      }

      // optional float sampleIntervalMsec = 3;
      case 3: {
        if (tag == 29) {
         parse_sampleIntervalMsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampleintervalmsec_)));
          set_has_sampleintervalmsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_numSamples;
        break;
      }

      // optional uint32 numSamples = 4;
      case 4: {
        if (tag == 32) {
         parse_numSamples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numsamples_)));
          set_has_numsamples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numDevices;
        break;
      }

      // optional int32 numDevices = 5;
      case 5: {
        if (tag == 40) {
         parse_numDevices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numdevices_)));
          set_has_numdevices();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_outputsets;
        break;
      }

      // repeated .serviceCassSpeed.output outputsets = 6;
      case 6: {
        if (tag == 50) {
         parse_outputsets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputsets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_outputsets;
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:serviceCassSpeed.cassspeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:serviceCassSpeed.cassspeed)
  return false;
#undef DO_
}

void cassspeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:serviceCassSpeed.cassspeed)
  // required uint64 timeStampStart = 1;
  if (has_timestampstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestampstart(), output);
  }

  // optional uint64 timeStampEnd = 2;
  if (has_timestampend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestampend(), output);
  }

  // optional float sampleIntervalMsec = 3;
  if (has_sampleintervalmsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sampleintervalmsec(), output);
  }

  // optional uint32 numSamples = 4;
  if (has_numsamples()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numsamples(), output);
  }

  // optional int32 numDevices = 5;
  if (has_numdevices()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numdevices(), output);
  }

  // repeated .serviceCassSpeed.output outputsets = 6;
  for (int i = 0; i < this->outputsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->outputsets(i), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:serviceCassSpeed.cassspeed)
}

::google::protobuf::uint8* cassspeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:serviceCassSpeed.cassspeed)
  // required uint64 timeStampStart = 1;
  if (has_timestampstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestampstart(), target);
  }

  // optional uint64 timeStampEnd = 2;
  if (has_timestampend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestampend(), target);
  }

  // optional float sampleIntervalMsec = 3;
  if (has_sampleintervalmsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sampleintervalmsec(), target);
  }

  // optional uint32 numSamples = 4;
  if (has_numsamples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numsamples(), target);
  }

  // optional int32 numDevices = 5;
  if (has_numdevices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numdevices(), target);
  }

  // repeated .serviceCassSpeed.output outputsets = 6;
  for (int i = 0; i < this->outputsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->outputsets(i), target);
  }

  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serviceCassSpeed.cassspeed)
  return target;
}

int cassspeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timeStampStart = 1;
    if (has_timestampstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestampstart());
    }

    // optional uint64 timeStampEnd = 2;
    if (has_timestampend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestampend());
    }

    // optional float sampleIntervalMsec = 3;
    if (has_sampleintervalmsec()) {
      total_size += 1 + 4;
    }

    // optional uint32 numSamples = 4;
    if (has_numsamples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numsamples());
    }

    // optional int32 numDevices = 5;
    if (has_numdevices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numdevices());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .serviceCassSpeed.output outputsets = 6;
  total_size += 1 * this->outputsets_size();
  for (int i = 0; i < this->outputsets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputsets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cassspeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cassspeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cassspeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cassspeed::MergeFrom(const cassspeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  outputsets_.MergeFrom(from.outputsets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestampstart()) {
      set_timestampstart(from.timestampstart());
    }
    if (from.has_timestampend()) {
      set_timestampend(from.timestampend());
    }
    if (from.has_sampleintervalmsec()) {
      set_sampleintervalmsec(from.sampleintervalmsec());
    }
    if (from.has_numsamples()) {
      set_numsamples(from.numsamples());
    }
    if (from.has_numdevices()) {
      set_numdevices(from.numdevices());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cassspeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cassspeed::CopyFrom(const cassspeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cassspeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->outputsets())) return false;
  return true;
}

void cassspeed::Swap(cassspeed* other) {
  if (other != this) {
    std::swap(timestampstart_, other->timestampstart_);
    std::swap(timestampend_, other->timestampend_);
    std::swap(sampleintervalmsec_, other->sampleintervalmsec_);
    std::swap(numsamples_, other->numsamples_);
    std::swap(numdevices_, other->numdevices_);
    outputsets_.Swap(&other->outputsets_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cassspeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cassspeed_descriptor_;
  metadata.reflection = cassspeed_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serviceCassSpeed

// @@protoc_insertion_point(global_scope)
